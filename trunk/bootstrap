#!/bin/sh
#--------------------------------------------------------------------------------
# Script to initialize the Stylus build environment: It creates the directory
# hierarchy and runs configure. While a user may directly run configure, this
# script allows for multiple versions to exist simultaneously.
#
# NOTE:
# This script must run before all others.
# 
# Stylus, Copyright 2006-2008 Biologic Institute
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#--------------------------------------------------------------------------------

clean=off
cleant=off
prep=off
debug=off
release=off
profile=off
verbose=on
configure_args=

usage()
{
    echo "$(basename $0): Script to prepare the Stylus build environment."
    echo "Usage: $(basename $0) \"options\""
    echo "       where options may be any of the following:"
    echo "       -c | -clean   | --c | --clean   : Clean Stylus build environment"
	echo "       -t | -test    | --t | --test    : Clean just the Stylus test directory"
    echo "       -d | -debug   | --d | --debug   : Create a debug build environment (default)"
    echo "       -r | -release | --r | --release : Create a release build environment"
    echo "       -p | -profile | --p | --profile : Create a profile (measured) build environment"
    echo "       -a | -all     | --a | --all     : Create the entire build environment"
    echo "       -q | -quite   | --q | --quite   : Silence output"
    echo "       -h | -help    | --h | --help    : Show this help text"
	echo "       -  | --                         : Pass all following arguments to configure unmodified"
    exit 1
}

until [ -z "$1" ]
do
	case $1 in
		-c | -clean   | --c | --clean  ) clean=on;;
		-t | -test    | --t | --test   ) cleant=on;;
		-d | -debug   | --d | --debug  ) debug=on; prep=on;;
		-r | -release | --r | --release) release=on; prep=on;;
		-p | -profile | --p | --profile) profile=on; prep=on;;
		-a | -all     | --a | --all    ) debug=on; release=on; profile=on; prep=on;;
		-q | -quite   | --q | --quite  ) verbose=off;;
		-h | -help    | --h | --help   ) usage;;
		-  | --) shift; configure_args=$*; break;;
	esac
	shift
done

if [ ${clean} = "off" ] && [ ${cleant} = "off" ] && [ ${prep} = "off" ] && [ ${debug} = "off" ] && [ ${release} = "off" ] ; then
	clean=on
    prep=on
	release=on
fi

if [ ${clean} = "on" ] && [ ${prep} = "off" ] && [ ${debug} = "on" -o ${release} = "on" -o ${profile} = "on" ] ; then
	prep=on
fi

if [ ${clean} = "on" ] || [ ${cleant} = "on" ] ; then
	echo "Cleaning the environment..."
fi

if [ ${clean} = "on" ] ; then
	rm genconstants >/dev/null 2>/dev/null

	rm Makefile    >/dev/null 2>/dev/null
	rm Makefile.in >/dev/null 2>/dev/null
	rm aclocal.m4  >/dev/null 2>/dev/null

	rm libtool                  >/dev/null 2>/dev/null
    rm config.{h.in,log,status} >/dev/null 2>/dev/null
    rm configure                >/dev/null 2>/dev/null

    find src/ -name "Makefile.in" -exec rm {} \; >/dev/null 2>/dev/null

	rm -drf autom4te.cache >/dev/null 2>/dev/null
    rm -drf obj            >/dev/null 2>/dev/null
fi

if [ ${clean} = "on" ] || [ ${cleant} = "on" ] ; then
	for dir in "data" "reports"
	do
		rm -drf sample/$dir >/dev/null 2>/dev/null
	done
fi

if [ ${prep} = "on" ] ; then
	echo "Preparing the environment..."

	mkdir obj     >/dev/null 2>/dev/null

    aclocal -I m4
if [ ${OSTYPE:0:6} = "darwin" ] ; then
	glibtoolize --automake --force
else
	libtoolize
fi
	autoheader
    autoconf -I m4
    automake --foreign --add-missing
fi

if [ ${debug} = "on" ] ; then
    echo "Creating obj/debug..."
    rm -drf obj/debug >/dev/null 2>/dev/null
    mkdir   obj/debug >/dev/null 2>/dev/null
    pushd   obj/debug >/dev/null 2>/dev/null
	if [ $verbose = "off" ] ; then
		../../configure $configure_args --enable-debug --silent >/dev/null
	else
		../../configure $configure_args --enable-debug
	fi
    popd >/dev/null 2>/dev/null
fi

if [ ${release} = "on" ] ; then
    echo "Creating obj/release..."
    rm -drf obj/release >/dev/null 2>/dev/null
    mkdir   obj/release >/dev/null 2>/dev/null
    pushd   obj/release >/dev/null 2>/dev/null
	if [ $verbose = "off" ] ; then
		../../configure $configure_args --silent >/dev/null
	else
		../../configure $configure_args
	fi
    popd >/dev/null 2>/dev/null
fi

if [ ${profile} = "on" ] ; then
    echo "Creating obj/profile..."
    rm -drf obj/profile >/dev/null 2>/dev/null
    mkdir   obj/profile >/dev/null 2>/dev/null
    pushd   obj/profile >/dev/null 2>/dev/null
	if [ $verbose = "off" ] ; then
		../../configure $configure_args --enable-profile --silent >/dev/null
	else
		../../configure $configure_args --enable-profile
	fi
    popd >/dev/null 2>/dev/null
fi

exit 0
